apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

repositories {
    jcenter()
    google()
    mavenCentral()
}

dependencies {
    implementation localGroovy()
    implementation gradleApi()
    implementation 'commons-io:commons-io:2.4'
    implementation 'commons-codec:commons-codec:1.6'
    implementation 'org.apache.commons:commons-lang3:3.4'
    implementation 'com.android.tools.build:gradle:3.2.1'
}

group 'cn.zengcanxiang'
def artifact = 'android-pack-plugin'
version '1.0.2'

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId group
            artifactId artifact
            version version
        }
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier 'sources'
}

//task javadocJar(type: Jar) {
//    from javadoc
//    classifier 'javadoc'
//}

artifacts {
//    archives javadocJar
    archives sourcesJar
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    publications = ['MyPublication']
    configurations = ['archives']
    pkg {
        repo = 'maven'
        name = artifact
        userOrg = user
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/zengcanxiang/Android-pack-plugin.git'
        publicDownloadNumbers = true
    }
}

apply plugin: 'signing'

version = VERSION_NAME
group = GROUP

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}


def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "http://172.16.10.155:8081/repository/maven-releases/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "http://172.16.10.155:8081/repository/maven-snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('USERNAME') ? USERNAME : (hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : "admin")
}

def getRepositoryPassword() {
    return hasProperty('PASSWORD') ? PASSWORD : (hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : "admin123")
}
uploadArchives {
    repositories {
        mavenDeployer {

            pom.groupId = GROUP
            pom.artifactId = POM_ARTIFACT_ID
            pom.version = VERSION_NAME

            /*repository(url: uri('../tmp/repo'))*/
            repository(url: getReleaseRepositoryUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }
            snapshotRepository(url: getSnapshotRepositoryUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }
            pom.project {
                name POM_NAME
                packaging POM_PACKAGING
                description POM_DESCRIPTION
                url POM_URL

                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }

                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }

                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                    }
                }
            }
        }
    }
}
